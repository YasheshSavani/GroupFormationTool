<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.csci5308.groupme.user.UserControllerTest" tests="2" skipped="0" failures="0" errors="0" timestamp="2020-06-18T05:52:28" hostname="YASHESH" time="0.053">
  <properties/>
  <testcase name="getResetPasswordPageTest()" classname="com.csci5308.groupme.user.UserControllerTest" time="0.032"/>
  <testcase name="getResetPasswordPageNoAccessTest()" classname="com.csci5308.groupme.user.UserControllerTest" time="0.02"/>
  <system-out><![CDATA[2020-06-18 02:52:28.453  INFO 17904 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.csci5308.groupme.user.UserControllerTest], using SpringBootContextLoader
2020-06-18 02:52:28.454  INFO 17904 --- [    Test worker] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [com.csci5308.groupme.user.UserControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2020-06-18 02:52:28.454  INFO 17904 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.csci5308.groupme.user.UserControllerTest]: UserControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2020-06-18 02:52:28.463  INFO 17904 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.csci5308.groupme.GroupmeApplication for test class com.csci5308.groupme.user.UserControllerTest
2020-06-18 02:52:28.465  INFO 17904 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener, org.springframework.security.test.context.support.ReactorContextTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2020-06-18 02:52:28.467  INFO 17904 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@7e8914f8, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@3916823d, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@62fe2b2, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@8418403, org.springframework.test.context.support.DirtiesContextTestExecutionListener@3ed97f27, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener@33d305ab, org.springframework.test.context.event.EventPublishingTestExecutionListener@4a905b11, org.springframework.security.test.context.support.ReactorContextTestExecutionListener@4ef5bfdc, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3ba0c162, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@107575e0, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@5875fc2c, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@3b1db3a1, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@60bde71, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@3dea7125]

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /resetPassword
       Parameters = {secretCode=[21wyp882e81dgw5], email=[abhinav.mandava78@gmail.com]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.csci5308.groupme.user.controller.UserController
           Method = com.csci5308.groupme.user.controller.UserController#resetPassword(String, String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = auth/resetPassword
             View = null
        Attribute = email
            value = abhinav.mandava78@gmail.com
        Attribute = passwordProperties
            value = com.csci5308.groupme.auth.config.PasswordProperties@7f4708ef
           errors = []

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", Strict-Transport-Security:"max-age=31536000 ; includeSubDomains", X-Frame-Options:"DENY"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html>
<head>
    <meta charset="ISO-8859-1">
    <link rel="stylesheet" href="/css/main.css"/>
    <link
            href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css"
            rel="stylesheet"
            integrity="sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M"
            crossorigin="anonymous">
    <link
            href="https://getbootstrap.com/docs/4.0/examples/signin/signin.css"
            rel="stylesheet" crossorigin="anonymous">
    <link rel="stylesheet" href="/css/theme.css"/>
    <title>Forgot Password</title>
    <script type="text/javascript">
        function validate() {
            var minLength = "10";
            var maxLength = "50";
            var minUpperCase = "1";
            var minLowerCase = "1";
            var minSpecialChars = "2";
            var invalidChars = "*()";
            var minUpperCaseChecker = new RegExp(`^(.*?[A-Z]){${minUpperCase},}`);
            var minLowerCaseChecker = new RegExp(`^(.*?[a-z]){${minLowerCase},}`);
            var minSpecialCharsChecker = new RegExp(
                `^(.*?[!@#\$%\^\&*\)\(+=._-]){${minSpecialChars},}`);
            var invalidCharsChecker = new RegExp(`^[^${invalidChars}]*$`);

            if (document.resetPasswordForm.password.value.length < minLength) {
                alert(`Password should be atleast ${minLength} characters`);
                document.resetPasswordForm.password.focus();
                return false;
            }

            if (document.resetPasswordForm.password.value.length > maxLength) {
                alert(`Password should be atmost ${maxLength} characters`);
                document.resetPasswordForm.password.focus();
                return false;
            }

            if (!minUpperCaseChecker
                .test(document.resetPasswordForm.password.value)) {
                alert(`Password should have atleast ${minUpperCase} uppercase characters`);
                document.resetPasswordForm.password.focus();
                return false;
            }

            if (!minLowerCaseChecker
                .test(document.resetPasswordForm.password.value)) {
                alert(`Password should have atleast ${minLowerCase} lowercase characters`);
                document.resetPasswordForm.password.focus();
                return false;
            }

            if (!invalidCharsChecker
                .test(document.resetPasswordForm.password.value)) {
                alert(`Password cannot contain the characters: ${invalidChars}`);
                document.resetPasswordForm.password.focus();
                return false;
            }

            if (!minSpecialCharsChecker
                .test(document.resetPasswordForm.password.value)) {
                alert(`Password should have atleast ${minSpecialChars} special characters`);
                document.resetPasswordForm.password.focus();
                return false;
            }

            if (document.resetPasswordForm.password.value == "") {
                alert("Please provide your password!");
                document.resetPasswordForm.password.focus();
                return false;
            }
            if (document.resetPasswordForm.confirmPassword.value == "") {
                alert("Please confirm your password!");
                document.resetPasswordForm.confirmPassword.focus();
                return false;
            }

            if (document.resetPasswordForm.password.value != document.resetPasswordForm.confirmPassword.value) {
                alert("Passwords do not match!");
                document.resetPasswordForm.confirmPassword.focus();
                return false;
            }
            console.log(minLength);
            return true;
        }
    </script>
</head>
<body>
<ul>
    <li class="reset"><a href="#resetPassword"
                         style="text-align: center"> GroupMe </a></li>

</ul>

<div class="container">

    <h2 style="text-align: center">Reset Password</h2>
    <form name="resetPasswordForm" onSubmit="return validate();"
          action="/resetPassword" method="post"
          class="custom-form-control">

        <p>
            <input type="text" id="email" name="email" placeholder="Email"
                   required="true" autofocus="true" value="abhinav.mandava78@gmail.com"/>
        </p>

        <p>
            <input type="password" id="password" name="password"
                   placeholder="Password" required="true" autofocus="true"/>
        </p>

        <p>
            <input type="password" id="confirm" name="confirmPassword"
                   placeholder="Confirm Password" required="true" autofocus=""/>
        </p>

        <button class="btn btn-lg btn-primary btn-block btn-submit"
                type="submit">Submit
        </button>

        <button class="btn btn-lg btn-primary btn-block btn-submit"
                type="reset">Clear
        </button>


    </form>
    <p1 style="text-align: center" class="text-center"></p1>

</div>

<!-- <form name="resetPasswordForm" onSubmit="return (validate());"
    th:action="@{/resetPassword}" method="post">

    <table style="margin-left: auto; margin-right: auto;">
        <tr>
            <td colspan="2"><h3 style="text-align: center">Enter new
                    password</h3></td>
        </tr>
        <tr>
            <td align="right">Email</td>
            <td><input type="email" name="email" th:value="${email}"/></td>
        </tr>
        <tr>
            <td align="right">Password</td>
            <td><input type="password" name="password" /></td>
        </tr>
        <tr>
            <td align="right">Confirm Password</td>
            <td><input type="password" name="confirmPassword" /></td>
        </tr>
        <tr>
            <td align="right"></td>
            <td><input type="submit" value="Submit" /></td>
        </tr>
    </table>
</form> -->
</body>
</html>
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /resetPassword
       Parameters = {secretCode=[22333], email=[abhinav.mandava78@gmail.com]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.csci5308.groupme.user.controller.UserController
           Method = com.csci5308.groupme.user.controller.UserController#resetPassword(String, String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = auth/unauthorized
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", Strict-Transport-Security:"max-age=31536000 ; includeSubDomains", X-Frame-Options:"DENY"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html>
<head>
    <meta charset="ISO-8859-1">
    <title>Insert title here</title>
</head>
<body>
<h1>You are not authorized to access this resource</h1>
</body>
</html>
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
